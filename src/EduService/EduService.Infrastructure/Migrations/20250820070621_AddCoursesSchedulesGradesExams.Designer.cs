// <auto-generated />
using System;
using EduService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduService.Infrastructure.Migrations
{
    [DbContext(typeof(EduDbContext))]
    [Migration("20250820070621_AddCoursesSchedulesGradesExams")]
    partial class AddCoursesSchedulesGradesExams
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduService.Domain.Entities.EduAcademicYear", b =>
                {
                    b.Property<Guid>("YearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Activated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("YearName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("YearID");

                    b.HasIndex("YearCode")
                        .IsUnique();

                    b.HasIndex("YearName")
                        .IsUnique();

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduAttendance", b =>
                {
                    b.Property<Guid>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EnrollmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WeekID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendanceID");

                    b.HasIndex("EnrollmentID");

                    b.HasIndex("ScheduleID", "WeekID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduClass", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstructorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProgramID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID");

                    b.HasIndex("ClassCode")
                        .IsUnique();

                    b.HasIndex("InstructorID");

                    b.HasIndex("ProgramID");

                    b.ToTable("AdministrativeClasses");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduCourseSection", b =>
                {
                    b.Property<Guid>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<Guid?>("InstructorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("SemesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("InstructorID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("SubjectID");

                    b.ToTable("CourseSections");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduCurriculum", b =>
                {
                    b.Property<Guid>("ProgramID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Compulsory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SemesterOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduDepartment", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentCode")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasFilter("[ShortName] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduEnrollment", b =>
                {
                    b.Property<Guid>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("SectionID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduExam", b =>
                {
                    b.Property<Guid>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Attendees")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExamSessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StartPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamID");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ExamSessionID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SectionID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduExamSession", b =>
                {
                    b.Property<Guid>("ExamSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("SemesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamSessionID");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("SemesterID");

                    b.ToTable("ExamSessions");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduGrade", b =>
                {
                    b.Property<Guid>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AssignmentScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EnrollmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FinalExamScore")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<double?>("MidtermScore")
                        .HasColumnType("float");

                    b.Property<bool?>("Passed")
                        .HasColumnType("bit");

                    b.Property<double?>("Total100Score")
                        .HasColumnType("float");

                    b.Property<double?>("Total10Score")
                        .HasColumnType("float");

                    b.Property<double?>("Total4Score")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradeID");

                    b.HasIndex("EnrollmentID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduInstructor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOB")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduMajor", b =>
                {
                    b.Property<Guid>("MajorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MajorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MajorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MajorID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("MajorCode")
                        .IsUnique();

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduPeriod", b =>
                {
                    b.Property<int>("PeriodNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodNumber"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodNumber");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduProgram", b =>
                {
                    b.Property<Guid>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MajorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramID");

                    b.HasIndex("MajorID");

                    b.HasIndex("ProgramCode")
                        .IsUnique();

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduRoom", b =>
                {
                    b.Property<Guid>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Building")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomName")
                        .IsUnique()
                        .HasFilter("[RoomName] IS NOT NULL");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSchedule", b =>
                {
                    b.Property<Guid>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("EndPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SectionID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduScheduleWeek", b =>
                {
                    b.Property<Guid>("ScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeekID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleID", "WeekID");

                    b.HasIndex("WeekID");

                    b.ToTable("ScheduleWeeks");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSemester", b =>
                {
                    b.Property<Guid>("SemesterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Activated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SemesterOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("YearID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SemesterID");

                    b.HasIndex("SemesterCode")
                        .IsUnique();

                    b.HasIndex("SemesterName")
                        .IsUnique();

                    b.HasIndex("YearID");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduStudent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MajorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSubject", b =>
                {
                    b.Property<Guid>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PercentageOfExam")
                        .HasColumnType("int");

                    b.Property<int>("PercentageOfHomework")
                        .HasColumnType("int");

                    b.Property<int>("PercentageOfProgress")
                        .HasColumnType("int");

                    b.Property<int>("PracticeHours")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TheoryHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID");

                    b.HasIndex("SubjectCode")
                        .IsUnique()
                        .HasFilter("[SubjectCode] IS NOT NULL");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSubjectPrerequisite", b =>
                {
                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrerequisiteSubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID", "PrerequisiteSubjectID");

                    b.HasIndex("PrerequisiteSubjectID");

                    b.ToTable("SubjectPrerequisites");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduWeek", b =>
                {
                    b.Property<Guid>("WeekID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SemesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WeekName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("WeekID");

                    b.HasIndex("SemesterID");

                    b.HasIndex("WeekCode")
                        .IsUnique();

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduAttendance", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduEnrollment", "Enrollment")
                        .WithMany("Attendances")
                        .HasForeignKey("EnrollmentID");

                    b.HasOne("EduService.Domain.Entities.EduScheduleWeek", "ScheduleWeek")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleID", "WeekID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("ScheduleWeek");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduClass", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduInstructor", "Instructor")
                        .WithMany("Classes")
                        .HasForeignKey("InstructorID");

                    b.HasOne("EduService.Domain.Entities.EduProgram", "Program")
                        .WithMany("Classes")
                        .HasForeignKey("ProgramID");

                    b.Navigation("Instructor");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduCourseSection", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduInstructor", "Instructor")
                        .WithMany("CourseSections")
                        .HasForeignKey("InstructorID");

                    b.HasOne("EduService.Domain.Entities.EduSemester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterID");

                    b.HasOne("EduService.Domain.Entities.EduSubject", "Subject")
                        .WithMany("CourseSections")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Instructor");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduCurriculum", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduService.Domain.Entities.EduSubject", "Subject")
                        .WithMany("Curriculums")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduEnrollment", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduCourseSection", "Section")
                        .WithMany("Enrollments")
                        .HasForeignKey("SectionID");

                    b.HasOne("EduService.Domain.Entities.EduStudent", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID");

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduExam", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduExamSession", "ExamSession")
                        .WithMany("Exams")
                        .HasForeignKey("ExamSessionID");

                    b.HasOne("EduService.Domain.Entities.EduRoom", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.HasOne("EduService.Domain.Entities.EduCourseSection", "Section")
                        .WithMany("Exams")
                        .HasForeignKey("SectionID");

                    b.Navigation("ExamSession");

                    b.Navigation("Room");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduExamSession", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduSemester", "Semester")
                        .WithMany("ExamSessions")
                        .HasForeignKey("SemesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduGrade", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduEnrollment", "Enrollment")
                        .WithMany("Grades")
                        .HasForeignKey("EnrollmentID");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduInstructor", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduMajor", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduDepartment", "Department")
                        .WithMany("Majors")
                        .HasForeignKey("DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduProgram", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduMajor", "Major")
                        .WithMany("Programs")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSchedule", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduRoom", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.HasOne("EduService.Domain.Entities.EduCourseSection", "Section")
                        .WithMany("Schedules")
                        .HasForeignKey("SectionID");

                    b.Navigation("Room");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduScheduleWeek", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduSchedule", "Schedule")
                        .WithMany("ScheduleWeeks")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduService.Domain.Entities.EduWeek", "Week")
                        .WithMany("ScheduleWeeks")
                        .HasForeignKey("WeekID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSemester", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduAcademicYear", "AcademicYear")
                        .WithMany("Semesters")
                        .HasForeignKey("YearID");

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduStudent", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduClass", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSubjectPrerequisite", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduSubject", "PrerequisiteSubject")
                        .WithMany("IsPrerequisiteFor")
                        .HasForeignKey("PrerequisiteSubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduService.Domain.Entities.EduSubject", "Subject")
                        .WithMany("Prerequisites")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrerequisiteSubject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduWeek", b =>
                {
                    b.HasOne("EduService.Domain.Entities.EduSemester", "Semester")
                        .WithMany("Weeks")
                        .HasForeignKey("SemesterID");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduAcademicYear", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduClass", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduCourseSection", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Exams");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduDepartment", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduEnrollment", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduExamSession", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduInstructor", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduMajor", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduProgram", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSchedule", b =>
                {
                    b.Navigation("ScheduleWeeks");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduScheduleWeek", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSemester", b =>
                {
                    b.Navigation("ExamSessions");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduStudent", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduSubject", b =>
                {
                    b.Navigation("CourseSections");

                    b.Navigation("Curriculums");

                    b.Navigation("IsPrerequisiteFor");

                    b.Navigation("Prerequisites");
                });

            modelBuilder.Entity("EduService.Domain.Entities.EduWeek", b =>
                {
                    b.Navigation("ScheduleWeeks");
                });
#pragma warning restore 612, 618
        }
    }
}
